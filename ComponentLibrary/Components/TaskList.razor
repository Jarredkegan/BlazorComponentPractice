@page "/TaskList"

<h3>Task List</h3>

@if (taskList.Count > 0)
{ 
    <div class="progress my-2">
        <div class="progress-bar" role="progressbar"
             style="width: @(percentDone)%"
             aria-valuemin="0" aria-valuemax="100">@(percentDone)</div>
    </div>
}

<EditForm class="form-inline my-2" Model="@newTask" OnValidSubmit="AddTask">
    <InputText class="form-control mx-2" @bind-Value="newTask.Task"></InputText>
    <button class="btn btn-outline-primary" type="submit">Add Task</button>
</EditForm>

<ul class="list-group">
    @foreach (var task in taskList)
    {
        @if (task.IsComplete)
        {
            <li class="list-group-item list-group-item-success"
                @onclick="(()=> task.IsComplete = !task.IsComplete)">
                <del>@task.Task</del>
            </li>
        }
        else
        {
            <li class="list-group-item list-group-item-secondary"
                @onclick="(()=> task.IsComplete = !task.IsComplete)">
                @task.Task
            </li>

        }
    }
</ul>

@code {

    public class TaskModel
    {
        public string Task { get; set; }

        public bool IsComplete { get; set; }
    }

    //holds list of tasks
    private List<TaskModel> taskList = new List<TaskModel>();

    //new task
    private TaskModel newTask = new TaskModel();

    private int percentDone
    {
        get
        {
            return (taskList.Count(x => x.IsComplete) * 100) / taskList.Count;
        }
    }
    //called by OnValidSumbit from our EditForm
    private void AddTask()
    {
        //The model for the EditForm is newTask
        taskList.Add(newTask);

        //reset newTask after the new task has been added
        newTask = new TaskModel();
    }


}